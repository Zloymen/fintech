"use strict";!function(){angular.module("app",["ng","ngRoute","ngMaterial","ngMessages","ngAria","ngAnimate","ngCookies","ngSanitize","ngCookies","LocalStorageModule","md.data.table","ui.router","ui.mask","datetime","textAngular","ui.grid","ui.grid.pagination","ui.grid.selection","ui.grid.cellNav","ui.grid.grouping","ui.grid.autoResize","rzModule","ui-rangeSlider"]).config(["uiMask.ConfigProvider",function(e){e.maskDefinitions({K:/[a-zA-Z0-9]/,"*":/[a-zA-Z0-9]/}),e.clearOnBlur(!1)}]).config(["$mdDateLocaleProvider",function(e){e.firstDayOfWeek=1,e.formatDate=function(e){return moment(e).format("DD-MM-YYYY")},e.parseDate=function(e){return moment(e,"DD.MM.YYYY").toDate()}}])}(),function(){function e(e,t,n,o,a,r,i){n.applicationLoaded=!0,t.showToolbar=function(){return!e.includes("auth")},t.openMenu=function(e,t){e.open(t)},t.toggleSidenav=function(){a("sidenav-left").toggle()}}angular.module("app").controller("MainController",e),e.$inject=["$state","$scope","$rootScope","Prompt","$mdSidenav","$timeout","$mdDialog"]}(),function(){function e(e,t,n,o){t.html5Mode(!0),n.otherwise("/"),e.state("appui",{templateUrl:"/app/main.layout.html?1538469990541",controller:"MainController"}).state("appui.main",{url:"/",templateUrl:"/app/pages/main/present.html?1538469990541",controller:"PresentController",controllerAs:"presentCtrl"}).state("appui.buy",{url:"/buy",templateUrl:"/app/pages/step/step.html?1538469990541",controller:"StepController",controllerAs:"stepCtrl",resolve:{reservation:["$rootScope","ReservationManager",function(e,t){return t.get()}]}}).state("appui.info",{url:"/info",templateUrl:"/app/pages/info/info.html?1538469990541",controller:"InfoController",controllerAs:"infoCtrl",resolve:{catalogs:["$rootScope","OrderManager",function(e,t){return t.getCatalogs()}]}})}angular.module("app").config(e),e.$inject=["$stateProvider","$locationProvider","$urlRouterProvider"]}(),function(){function e(e){return{restrict:"A",link:function(t,n){var o=e.iOsSafari()?"safari-mobile":"browser";n.addClass(o)}}}angular.module("app").directive("browser",e),e.$inject=["Device"]}(),function(){function e(){return{restrict:"A",require:"ngModel",scope:{compareTo:"=compare"},link:function(e,t,n,o){o.$validators.notEqual=function(t,n){return!!o.$isEmpty(t)||n===e.compareTo.$viewValue},e.$watch("compareTo.$viewValue",function(){o.$validate()})}}}angular.module("app").directive("compare",e)}(),function(){angular.module("app").directive("strongPassRequired",function(){var e=function(e){return e&&/(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=\S+$).{6,}/.test(e)};return{require:"ngModel",link:function(t,n,o,a){a.$parsers.unshift(function(t){return a.$setValidity("strongPass",e(t)),t}),a.$formatters.unshift(function(t){return a.$setValidity("strongPass",e(t)),t})}}}).directive("passwordMatch",[function(){return{restrict:"A",scope:!0,require:"ngModel",link:function(e,t,n,o){var a=function(){var t=e.$eval(n.ngModel),a=e.$eval(n.passwordMatch);return o.$validators.check=function(e){return!o.$isEmpty(e)&&e===a},t===a};e.$watch(a,function(e){o.$setValidity("unique",e)})}}}])}(),function(){function e(){return{restrict:"A",link:function(e,t,n,o){$(t).click(function(e){e.stopImmediatePropagation(),e.preventDefault()})}}}angular.module("app").directive("preventClick",e)}(),function(){function e(e){return{restrict:"A",link:function(t,n){n.on("change",function(){e(function(){t.uploadCtrl.uploadData.file=n[0].files[0]},100)})}}}angular.module("app").directive("uploadFile",e),e.$inject=["$timeout"]}(),function(){function e(e){return function(t,n){var o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"Ok",a={template:["<md-dialog>",'  <md-dialog-content class="md-dialog-content" role="document" tabIndex="-1">','    <h2 class="md-title" ng-bind-html="::dialog.title"></h2>','    <div ng-if="::dialog.mdHtmlContent" class="md-dialog-content-body"','        ng-bind-html="::dialog.htmlContent"></div>',"  </md-dialog-content>","  <md-dialog-actions>",'    <md-button ng-click="dialog.hide()" class="md-accent md-confirm-button" style="color: white;" md-autofocus="true">',"      {{ dialog.ok }}","    </md-button>","  </md-dialog-actions>","</md-dialog>"].join("").replace(/\s\s+/g,""),controllerAs:"dialog",multiple:!0,controller:["$mdDialog",function(e){var a=this,r=[t,n,o];a.title=r[0],a.htmlContent=r[1];var i=r[2];a.ok=void 0===i?o:i,a.hide=function(){e.hide()}}]};return e.show(a)}}angular.module("app").factory("Alert",e),e.$inject=["$mdDialog"]}(),function(){function e(e){return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"Ok",a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"Cancel";return e.show(e.confirm().title(t).textContent(n).ok(o).cancel(a))}}angular.module("app").factory("Confirm",e),e.$inject=["$mdDialog"]}(),function(){function e(e,t,n,o,a,r){function i(e){return e}function l(e){return console.log(e),[401,403].indexOf(e.status)>-1&&n.go("auth.login"),413===e.status&&r("Attachment is too large","Please choose another attachment or resize this one"),400===e.status&&r("Error",e.data.message||"Please try again"),401!==e.status&&402!==e.status&&403!==e.status||r("Unauthorized access",e.data.message||"Try to sign in again, please ..."),t.reject(e)}function c(n){var r=n.method,c=void 0===r?"get":r,s=n.url,d=void 0===s?"/":s,p=n.data,f=void 0===p?{}:p,g=n.headers,m=void 0===g?{}:g,h=n.transformRequest,v=void 0===h?null:h,$=n.triggerCircleLoader,y=void 0===$?{trigger:!1,message:null}:$;y.trigger&&o(function(){a.$broadcast("circleLoaderStart",{message:y.message})});var M={method:c,url:u+d,withCredentials:!0};return"get"===c.toLowerCase()||"delete"===c.toLocaleLowerCase()?M.params=f:M.data=f,v&&(M.transformRequest=v),0!==Object.keys(m).length&&(M.headers=m),e(M).then(i,l).then(function(e){return y.trigger&&o(function(){a.$broadcast("circleLoaderStop",{message:null})}),e},function(e){return y.trigger&&o(function(){a.$broadcast("circleLoaderStop",{message:null})}),t.reject(e)})}var u="";return{request:c}}angular.module("app").factory("HttpManager",e),e.$inject=["$http","$q","$state","$timeout","$rootScope","Alert"]}(),function(){function e(e){function t(){return e.request({method:"GET",url:"/order/catalogs"})}function n(t,n,o){return e.request({method:"GET",url:"/order/report",data:{filmId:t.id,day:moment(n).format("DD.MM.YYYY"),sessionId:o}})}function o(){return e.request({method:"POST",url:"/order/"})}return{report:n,getCatalogs:t,buy:o}}angular.module("app").factory("OrderManager",e),e.$inject=["HttpManager"]}(),function(){function e(e){return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"",a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"Ok",r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"Cancel";return e.show(e.prompt().title(t).textContent(n).placeholder(o).required(!0).ok(a).cancel(r))}}angular.module("app").factory("Prompt",e),e.$inject=["$mdDialog"]}(),function(){function e(e){function t(){return e.request({method:"GET",url:"/reservation/"})}function n(t,n,o){return e.request({method:"GET",url:"/reservation/usedPlaces",data:{filmId:t.id,day:moment(n).format("DD.MM.YYYY"),sessionId:o}})}function o(){return e.request({method:"POST",url:"/reservation/delete"})}function a(t){var n=angular.copy(t);return n.day=moment(n.day).format("DD.MM.YYYY"),n.film=n.film.id,e.request({method:"POST",url:"/reservation/",data:n})}return{getUsedPlace:n,get:t,cancel:o,save:a}}angular.module("app").factory("ReservationManager",e),e.$inject=["HttpManager"]}(),function(){angular.module("app").component("captcha",{templateUrl:"./app/components/captcha/captcha.html"})}(),function(){function e(e,t,n){function o(){a.captchaUrl=a.captchaUrlSrc+"?"+(new Date).getTime()}var a=this;a.captchaUrlSrc="/api/v1/captcha.gif",a.captchaUrl=a.captchaUrlSrc,a.updateCaptcha=o}angular.module("app").controller("CaptchaController",e),e.$inject=["$state","$rootScope","$stateParams"]}(),function(){angular.module("app").component("logo",{templateUrl:"./app/components/logo/logo.html"})}(),function(){function e(e,t,n,o,a,r){function i(e,t){var n=angular.lowercase(e);return function(e){return 0===angular.lowercase(e[t]).indexOf(n)}}a&&a.data&&(e.catalogs=a.data),e.find=function(){e.film&&e.session&&e.day&&r.report(e.film,e.day,e.session).then(function(t){e.gridOptions.data=t.data})},e.gridOptions={columnDefs:[{name:"Место",field:"place.name",enableSorting:!1},{name:"Телефон",field:"phone",enableSorting:!1},{name:"Тип",field:"type",enableSorting:!1}],data:[]},e.main=function(){n.go("appui.main")},e.onChange=function(e){},e.clear=function(){e.film=null,e.session=null,e.day=new Date,e.gridOptions.data=[]},e.clear(),e.query=function(t){return t?e.catalogs.films.filter(i(t,"name")):e.catalogs.films}}angular.module("app").controller("InfoController",e),e.$inject=["$scope","$log","$state","$timeout","catalogs","OrderManager"]}(),function(){function e(e,t,n,o){e.buy=function(){n.go("appui.buy")},e.info=function(){n.go("appui.info")}}angular.module("app").controller("PresentController",e),e.$inject=["$scope","$log","$state","$timeout"]}(),function(){function e(e,t,n,o,a,r,i,l){function c(e,t){var n=angular.lowercase(e);return function(e){return 0===angular.lowercase(e[t]).indexOf(n)}}function u(t){t.data?(e.errMsg=t.data.message,e.uid=t.data.uuid):(e.errMsg="Неизвестная ошибка!",e.uid=null),e.step=0}e.reservation={film:{id:12,name:"Temporary Difficulties"},phone:"11111",day:new Date,session:"3",places:[]},e.toggle=function(e,t){var n=t.indexOf(e);n>-1?t.splice(n,1):t.push(e)},e.exists=function(e,t){return t.indexOf(e)>-1},e.step=1,e.errMsg="",e.search="",e.$watch("reservation",function(){e.reservation.film&&e.reservation.day&&e.reservation.session&&i.getUsedPlace(e.reservation.film,e.reservation.day,e.reservation.session).then(function(t){console.log(t.data),e.catalogs.places.forEach(function(e){e.disable=t.data.some(function(t){return t.id===e.id})}),console.log(e.catalogs.places)})},!0),e.onChange=function(e){},e.query=function(t){return t?e.catalogs.films.filter(c(t,"name")):e.catalogs.films},e.catalogs={},r.getCatalogs().then(function(t){try{e.catalogs=t.data}catch(n){u(n)}},function(e){u(e)}),e.stepSrc=function(){return e.step>0?"/app/pages/step/step"+e.step+".html":"/app/pages/step/stepError.html"},e.cancel=function(){i.cancel().then(function(){t.go("appui.main")},function(e){u(e)})},e.pay=function(){r.buy().then(function(t){e.step=3},function(e){u(e)})},e.reserved=function(){i.save(e.reservation).then(function(e){s(e.data)},function(e){u(e)})},e.savedReservation=null;var s=function(t){e.step=2,e.savedReservation=t,e.savedReservation.strPlaces=e.savedReservation.places.map(function(e){return e.name}).join()};l&&l.status&&200===l.status&&s(l.data),e.main=function(){t.go("appui.main")}}angular.module("app").controller("StepController",e),e.$inject=["$scope","$state","$rootScope","Alert","$timeout","OrderManager","ReservationManager","reservation"]}(),function(){function e(){return{restrict:"E",templateUrl:"shared/application-loader/application-loader.html"}}angular.module("app").directive("applicationLoader",e)}(),function(){function e(){return{restrict:"E",replace:!0,templateUrl:"./app/shared/circle-loader/circle-loader.html",controller:["$scope","$timeout","$interval",function(e,t,n){angular.element(document.body);e.circleLoaderMessage=null,e.showCircleLoader=!1,e.$on("circleLoaderStart",function(t,n){e.circleLoaderMessage=n.message,e.showCircleLoader=!0}),e.$on("circleLoaderStop",function(){e.showCircleLoader=!1,t(function(){e.circleLoaderMessage=null},400)})}]}}angular.module("app").directive("circleLoader",e)}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
